name: CI

on:
  push:
    branches:
      - main
      - develop
      - 'release/*'

    tags:
      - '*'

  pull_request:
    branches:
      - main
      - develop
      - 'release/*'

env:
  MAIN_REPO: clowder-framework/clowder2-react-frontend

jobs:

  # ----------------------------------------------------------------------
  # NODE BUILD
  # ----------------------------------------------------------------------
  build:
    timeout-minutes: 10
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        node:
          - "12"
          - "14"

    steps:
      # checkout source code
      - uses: actions/checkout@v2

      # setup node
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}

      # install dependencies
      - name: install dependencies
        run: npm install

      - name: Login to NCSA Hub
        uses: docker/login-action@v1
        with:
          registry: hub.ncsa.illinois.edu
          username: ${{ secrets.HUB_USERNAME }}
          password: ${{ secrets.HUB_PASSWORD }}
          
      #- name: Compute initial hash
      #  run: echo "OPENAPI_HASH_INIT=$(tar -c . | sha1sum)" >> $GITHUB_ENV

      - name: Start container
        run: docker run --rm -itd --name=clowder-fastapi -p 80:80 hub.ncsa.illinois.edu/clowder/clowder-fastapi:main

      - name: Wait for FastAPI
        run: while ! curl --output /dev/null --silent --fail http://localhost:80; do sleep 1 && echo -n .; done;
  
      - name: Save temp OpenAPI spec
        run: docker exec clowder-fastapi curl localhost/api/v2/openapi.json > ./openapi.json

      - name: Generate client from saved spec
        run: npm run codegen:v2
        # Trick codegen into using a local file
        env:
          CLOWDER_REMOTE_HOST: ' '
          CLOWDER_PATH_PREFIX: '.'

      - name: Stop container
        if: always()
        run: docker rm -f clowder-fastapi
        
      #- name: Compute new hash
      #  run: echo "OPENAPI_HASH_FINAL=$(tar -c . | sha1sum)" >> $GITHUB_ENV
        
      - name: Commit and push if changes detected
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "[AUTO] Regenerate OpenAPI client"
          file_pattern: src/openapi/v2/*
          skip_dirty_check: false

      - name: Run webpack build
        run: npm build
  
  # ----------------------------------------------------------------------
  # DOCKER BUILD
  # ----------------------------------------------------------------------
  docker:
    runs-on: ubuntu-latest

    steps:
      # checkout source code
      - uses: actions/checkout@v2

      # calculate some variables that are used later
      - name: version information
        run: |
          if [ "${{ github.event.release.target_commitish }}" != "" ]; then
            BRANCH="${{ github.event.release.target_commitish }}"
          elif [[ $GITHUB_REF =~ pull ]]; then
            BRANCH="$(echo $GITHUB_REF | sed 's#refs/pull/\([0-9]*\)/merge#PR-\1#')"
          else
            BRANCH=${GITHUB_REF##*/}
          fi
          echo "GITHUB_BRANCH=${BRANCH}" >> $GITHUB_ENV
          if [ "$BRANCH" == "main" ]; then
            version=$(cat package.json | grep \"version\" | head -1 | awk -F= "{ print $2 }" | sed 's/[version:,",]//g' | tr -d '[[:space:]]')
            tags="latest"
            oldversion=""
            while [ "${oldversion}" != "${version}" ]; do
              oldversion="${version}"
              tags="${tags},${version}"
              version=${version%.*}
            done
            echo "VERSION=$(awk '/version = / { print $4 }' project/Build.scala | sed 's/"//g')" >> $GITHUB_ENV
            echo "TAGS=${tags}" >> $GITHUB_ENV
          elif [ "$BRANCH" == "develop" ]; then
            echo "VERSION=develop" >> $GITHUB_ENV
            echo "TAGS=develop" >> $GITHUB_ENV
          else
            echo "VERSION=testing" >> $GITHUB_ENV
            echo "TAGS=${BRANCH}" >> $GITHUB_ENV
          fi

      # build image
      - name: Build image
        uses: elgohr/Publish-Docker-Github-Action@3.04
        with:
          name: clowder/clowder-react
          no_push: true

      # this will publish to NCSA
      - name: Publish to NCSA Hub
        #if: github.event_name != 'pull_request' && github.repository == env.MAIN_REPO
        if: github.repository == env.MAIN_REPO
        uses: elgohr/Publish-Docker-Github-Action@3.04
        env:
          BRANCH: ${{ env.GITHUB_BRANCH }}
          VERSION: ${{ env.VERSION }}
          BUILDNUMBER: ${{ github.run_number }}
          GITSHA1: ${{ github.sha  }}
        with:
          registry: hub.ncsa.illinois.edu
          name: clowder/clowder-react
          username: ${{ secrets.HUB_USERNAME }}
          password: ${{ secrets.HUB_PASSWORD }}
          tags: "${{ env.TAGS }}"
          buildargs: BRANCH,VERSION,BUILDNUMBER,GITSHA1
